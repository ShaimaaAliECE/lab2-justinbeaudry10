{"version":3,"sources":["Grid.js","index.js"],"names":["CellButton","disabled","this","props","style","onClick","className","React","Component","Grid","state","player","gameSpaces","gameOver","message","curPlayer","spaces","hCount","vCount","nullCount","row","col","setState","btns","push","e","target","backgroundColor","newGameSpaces","checkWin","id","renderBtns","ReactDOM","render","document","getElementById"],"mappings":"gMAGMA,E,4JACJ,WACE,OACE,wBACEC,SAAUC,KAAKC,MAAMF,SACrBG,MAAOF,KAAKC,MAAMC,MAClBC,QAASH,KAAKC,MAAME,QACpBC,UAAU,iB,GAPOC,IAAMC,WAaVC,E,kDACnB,WAAYN,GAAQ,IAAD,8BACjB,cAAMA,IACDO,MAAQ,CACXC,OAAQ,MACRC,WAAY,CACV,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACrC,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACrC,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACrC,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACrC,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACrC,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,OAEvCC,UAAU,EACVC,QAAS,IAbM,E,4CAiBnB,WAQE,IAPA,IAIIC,EAJAC,EAASd,KAAKQ,MAAME,WACpBK,EAAS,EACTC,EAAS,EACTC,EAAY,EAIPC,EAAM,EAAGA,EAAM,EAAGA,IACzB,IAAK,IAAIC,EAAM,EAAGA,EAAM,EAAGA,IACA,OAArBL,EAAOI,GAAKC,IACdF,IAMY,IAAdA,GACFjB,KAAKoB,SAAS,CACZT,UAAU,EACVC,QAAS,mCAMb,IAAK,IAAIM,EAAM,EAAGA,EAAM,EAAGA,IAAO,CAChCH,EAAS,EACT,IAAK,IAAII,EAAM,EAAGA,EAAM,EAAGA,IACA,OAArBL,EAAOI,GAAKC,IACdJ,EAAS,EACTF,EAAY,MACHC,EAAOI,GAAKC,KAASN,EAC9BE,KAEAA,EAAS,EACTF,EAAYC,EAAOI,GAAKC,IAGtBJ,GAAU,GACZf,KAAKoB,SAAS,CAAET,UAAU,EAAMC,QAASC,EAAY,UAO3D,IAAK,IAAIM,EAAM,EAAGA,EAAM,EAAGA,IAAO,CAChCH,EAAS,EACT,IAAK,IAAIE,EAAM,EAAGA,EAAM,EAAGA,IACA,OAArBJ,EAAOI,GAAKC,IACdH,EAAS,EACTH,EAAY,MACHC,EAAOI,GAAKC,KAASN,EAC9BG,KAEAA,EAAS,EACTH,EAAYC,EAAOI,GAAKC,IAGtBH,GAAU,GACZhB,KAAKoB,SAAS,CAAET,UAAU,EAAMC,QAASC,EAAY,a,wBAO7D,WAEE,IAFY,IAAD,OACPQ,EAAO,GADA,WAEFH,GACP,IAHS,eAGAC,GACPE,EAAKC,KACH,cAAC,EAAD,CAEEvB,SAAmB,EAAKS,MAAMG,SAC9BR,QAAS,SAACoB,GAERA,EAAEC,OAAOtB,MAAMuB,gBAAkB,EAAKjB,MAAMC,OAC5Cc,EAAEC,OAAOzB,UAAW,EAGpB,IAAI2B,EAAgB,EAAKlB,MAAME,WAC/BgB,EAAcR,GAAKC,GAAO,EAAKX,MAAMC,OACrC,EAAKW,SAAS,CAAEV,WAAYgB,IAE5B,EAAKC,WAGL,EAAKP,SAAS,CACZX,OAA8B,QAAtB,EAAKD,MAAMC,OAAmB,SAAW,UAhBhDS,EAAM,IAAMC,KAHdA,EAAM,EAAGA,EAAM,EAAGA,IAAQ,EAA1BA,GAyBTE,EAAKC,KAAK,sBAASJ,EAAM,QA1BlBA,EAAM,EAAGA,EAAM,EAAGA,IAAQ,EAA1BA,GA4BT,OAAOG,I,oBAGT,WACE,OACE,sBAAKO,GAAG,UAAR,UACE,qBAAKA,GAAG,UAAR,SACE,6BACG5B,KAAKQ,MAAMG,SACRX,KAAKQ,MAAMI,QACXZ,KAAKQ,MAAMC,OAAS,cAG5B,qBAAKmB,GAAG,UAAR,SAAmB5B,KAAK6B,sB,GAjIExB,IAAMC,WCVxCwB,IAASC,OAAO,cAAC,EAAD,IAAUC,SAASC,eAAe,U","file":"static/js/main.e0ea88e4.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./index.css\";\n\nclass CellButton extends React.Component {\n  render() {\n    return (\n      <button\n        disabled={this.props.disabled}\n        style={this.props.style}\n        onClick={this.props.onClick}\n        className=\"cell-btn\"\n      ></button>\n    );\n  }\n}\n\nexport default class Grid extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      player: \"Red\",\n      gameSpaces: [\n        [null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null],\n      ],\n      gameOver: false,\n      message: \"\",\n    };\n  }\n\n  checkWin() {\n    let spaces = this.state.gameSpaces;\n    let hCount = 0; // Checks horizontal win\n    let vCount = 0; // Checks vertical win\n    let nullCount = 0; // Checks if all spaces are occupied\n    let curPlayer;\n\n    // Goes through each cell and adds to the nullCount each time it encounters an empty space\n    for (let row = 0; row < 6; row++) {\n      for (let col = 0; col < 7; col++) {\n        if (spaces[row][col] === null) {\n          nullCount++;\n        }\n      }\n    }\n\n    // If there are no empty spaces, the game is over\n    if (nullCount === 0) {\n      this.setState({\n        gameOver: true,\n        message: \"All spaces occupied, game over\",\n      });\n    }\n\n    // Checking for horizontal win\n    // Goes row by row, and if there are 4 consecutive cells in that row with a particular colour, that colour wins\n    for (let row = 0; row < 6; row++) {\n      hCount = 0;\n      for (let col = 0; col < 7; col++) {\n        if (spaces[row][col] === null) {\n          hCount = 0;\n          curPlayer = null;\n        } else if (spaces[row][col] === curPlayer) {\n          hCount++;\n        } else {\n          hCount = 1;\n          curPlayer = spaces[row][col];\n        }\n\n        if (hCount >= 4) {\n          this.setState({ gameOver: true, message: curPlayer + \" Wins\" });\n        }\n      }\n    }\n\n    // Checking for vertical win\n    // Goes column by column, and if there are 4 consecutive cells in that column with a particular colour, that colour wins\n    for (let col = 0; col < 7; col++) {\n      vCount = 0;\n      for (let row = 0; row < 6; row++) {\n        if (spaces[row][col] === null) {\n          vCount = 0;\n          curPlayer = null;\n        } else if (spaces[row][col] === curPlayer) {\n          vCount++;\n        } else {\n          vCount = 1;\n          curPlayer = spaces[row][col];\n        }\n\n        if (vCount >= 4) {\n          this.setState({ gameOver: true, message: curPlayer + \" Wins\" });\n        }\n      }\n    }\n  }\n\n  // Renders 6 rows, 7 columns of buttons\n  renderBtns() {\n    let btns = [];\n    for (let row = 0; row < 6; row++) {\n      for (let col = 0; col < 7; col++) {\n        btns.push(\n          <CellButton\n            key={row + \" \" + col}\n            disabled={false || this.state.gameOver} // Button will be disabled when game is over or when disabled prop is explicitly set to true\n            onClick={(e) => {\n              // Sets colour to current player's colour\n              e.target.style.backgroundColor = this.state.player;\n              e.target.disabled = true;\n\n              // Updates the state of the gameSpaces\n              let newGameSpaces = this.state.gameSpaces;\n              newGameSpaces[row][col] = this.state.player;\n              this.setState({ gameSpaces: newGameSpaces });\n\n              this.checkWin();\n\n              // Changes current player\n              this.setState({\n                player: this.state.player === \"Red\" ? \"Yellow\" : \"Red\",\n              });\n            }}\n          />\n        );\n      }\n      btns.push(<br key={row + \"br\"} />);\n    }\n    return btns;\n  }\n\n  render() {\n    return (\n      <div id=\"gameDiv\">\n        <div id=\"message\">\n          <h1>\n            {this.state.gameOver\n              ? this.state.message\n              : this.state.player + \"'s Turn\"}\n          </h1>\n        </div>\n        <div id=\"gridDiv\">{this.renderBtns()}</div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nimport Grid from \"./Grid\";\n\nReactDOM.render(<Grid />, document.getElementById(\"root\"));\n"],"sourceRoot":""}